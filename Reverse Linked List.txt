class LinkedList:
    def __init__(self):
        self.head = None
    
    
    def add_begin(self,data):
        n = Node(data)
        n.next = self.head
        self.head = n
        
    def reverse1(self):
        present_node = self.head
        temp = []    
        i=0
        while present_node.next is not None:
            temp.append(present_node.data)         
            print(present_node.data," ",end=' ')
            present_node = present_node.next
            i=i+1
        print(present_node.data," ",end=' ')
        print("\n")
        temp.append(present_node.data)
        
        present_node = self.head
        for j in range(i,-1,-1):
            present_node.data = temp[j]
            print(present_node.data," ",end=' ')
            present_node = present_node.next       
            
            
    def reverse2(self):
       self.display()
    
       future_node = None
       previous_node = None
       present_node = self.head

       while present_node is not None:
           future_node = present_node.next
           present_node.next = previous_node
           previous_node = present_node
           present_node = future_node
    
       self.head = previous_node  
    
       self.display()


                
    def display(self):
        present_node = self.head
        while present_node is not None:
            print(present_node.data," ",end ='')
            present_node = present_node.next             
        print("\n")
        
        
    
class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
        
        
LL = LinkedList()
LL.add_begin(5)
LL.add_begin(4)
LL.add_begin(3)
LL.add_begin(2)
LL.add_begin(1)
LL.reverse2()
